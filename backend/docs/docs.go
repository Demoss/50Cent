// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/actions/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all unverified users (both investors and loaners) in JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all unverified users in JSON",
                "operationId": "admin-get-all-unverified-users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/admin/actions/users/consumers/{id}/approve": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Approve account of user with given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Approve consumer with given ID",
                "operationId": "admin-approve-consumer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/admin/actions/users/investors/{id}/approve": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Approve account of user with given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Approve investor with given ID",
                "operationId": "admin-approve-investor",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/admin/actions/users/{accountType}/{id}/decline": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Decline account of user with given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Decline user with given ID",
                "operationId": "admin-decline-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account type(either 'consumers' or 'investors')",
                        "name": "accountType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/admin/registration": {
            "post": {
                "description": "Create new admin account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Register new admin",
                "operationId": "admin-registration",
                "parameters": [
                    {
                        "description": "Email and passwords for admin",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.Registration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Send email and password to get temporary JWT login token then use it in the 2nd stage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login",
                    "Admin"
                ],
                "summary": "Get temporary JWT login token",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "Email and password for login",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login/confirm/email": {
            "post": {
                "description": "User can send verification code from his email and get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login",
                    "Admin"
                ],
                "summary": "Check verification code from email",
                "operationId": "loginConfirmEmail",
                "parameters": [
                    {
                        "description": "Verification code for login",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.LoginConfirm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.LoginConfirmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login/confirm/otp": {
            "post": {
                "description": "User can send verification code from his phone and get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login",
                    "Admin"
                ],
                "summary": "Check verification code from OTP",
                "operationId": "loginConfirmOTP",
                "parameters": [
                    {
                        "description": "Verification code for login",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.OTP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.LoginConfirmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login/confirm/phone": {
            "post": {
                "description": "User can send verification code from his phone and get JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login",
                    "Admin"
                ],
                "summary": "Check verification code from phone",
                "operationId": "loginConfirmPhone",
                "parameters": [
                    {
                        "description": "Verification code for login",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.LoginConfirm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.LoginConfirmResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login/email": {
            "post": {
                "description": "After receiving of temporary token user can send verification code on his email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login",
                    "Admin"
                ],
                "summary": "Send verification code to email",
                "operationId": "loginEmail",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login/phone": {
            "post": {
                "description": "After receiving of temporary token user can send verification code on his phone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login",
                    "Admin"
                ],
                "summary": "Send verification code to phone",
                "operationId": "loginPhone",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration": {
            "post": {
                "description": "Create not confirmed user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign-up"
                ],
                "summary": "Sign up",
                "operationId": "registration",
                "parameters": [
                    {
                        "description": "account info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.Registration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration/confirm": {
            "post": {
                "description": "Confirm user email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign-up"
                ],
                "summary": "Email confirmation",
                "operationId": "confirm",
                "parameters": [
                    {
                        "description": "Email and code for confirmation",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.ConfirmEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration/consumer": {
            "post": {
                "description": "Register new consumer for existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumer"
                ],
                "summary": "Register new consumer",
                "operationId": "consumerRegistration",
                "parameters": [
                    {
                        "description": "Parameters for consumer registration",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.ConsumerRegistration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration/consumer/addPayment": {
            "post": {
                "description": "Register stripe account for existing consumer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ConsumerPayment"
                ],
                "summary": "Register stripe account for existing consumer",
                "operationId": "consumerAddPayment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration/investor": {
            "post": {
                "description": "Register new investor for existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Investor"
                ],
                "summary": "Register new investor",
                "operationId": "investorRegistration",
                "parameters": [
                    {
                        "description": "Parameters for investor registration",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.InvestorRegistration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration/investor/addPayment": {
            "post": {
                "description": "Register stripe account for existing investor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ConsumerPayment"
                ],
                "summary": "Register stripe account for existing investor",
                "operationId": "investorAddPayment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration/otp": {
            "post": {
                "description": "Register OTP by installing Google Authenticator on your phone and scanning QR code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign-up"
                ],
                "summary": "Register OTP and Google Authenticator",
                "operationId": "registrationOTP",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.otpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/registration/otp/confirm": {
            "post": {
                "description": "Confirm OTP set-up by checking code from Google Authenticator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign-up"
                ],
                "summary": "OTP registration confirmation",
                "operationId": "confirmOTP",
                "parameters": [
                    {
                        "description": "Code for confirmation",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.OTP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset": {
            "post": {
                "description": "Check is email in db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reset Password"
                ],
                "summary": "Check Email",
                "operationId": "checkEmailForReset",
                "parameters": [
                    {
                        "description": "Email",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.RequestToResetPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset/change": {
            "post": {
                "description": "Change user password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reset Password"
                ],
                "summary": "Change Password",
                "operationId": "Reset",
                "parameters": [
                    {
                        "description": "Email and password to change",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.ChangePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset/confirm": {
            "post": {
                "description": "Confirm user email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reset Password"
                ],
                "summary": "Email confirmation",
                "operationId": "confirm Reset",
                "parameters": [
                    {
                        "description": "Email and code for confirmation",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.ConfirmEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/consumers/balance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get List of balance snapshots",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumer"
                ],
                "summary": "Get Balance history for consumer",
                "operationId": "getBalanceHistoryConsumer",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.balancesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/consumers/payments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get List of required payments snapshots",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consumer"
                ],
                "summary": "Get required payments for consumer",
                "operationId": "getRequiredPayments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.payoutsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/investors/balance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get List of balance snapshots",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Investor"
                ],
                "summary": "Get Balance history for investor",
                "operationId": "getBalanceHistoryInvestor",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.balancesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/investors/payouts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get List of potential payouts snapshots",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Investor"
                ],
                "summary": "Get potential payouts for investor",
                "operationId": "getPotentialPayouts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.payoutsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create loan request form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Create Loan",
                "operationId": "createLoan",
                "parameters": [
                    {
                        "description": "account info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.CreateLoan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/:id/accept": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accept loan request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Accept Loan",
                "operationId": "acceptLoan",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.stripeURLResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/:id/repay": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Make monthly payment for your loan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Repay loan",
                "operationId": "repayLoan",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.stripeURLResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/counteroffers/{id}/accept": {
            "post": {
                "description": "Consumer can accept investor's terms and update loan details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loan",
                    "Investor",
                    "Consumer"
                ],
                "summary": "Loan counteroffer accept",
                "operationId": "loanCounterofferAccept",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/counteroffers/{id}/reject": {
            "post": {
                "description": "Consumer can reject investor's terms if he doesn't want to accept them",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loan",
                    "Investor",
                    "Consumer"
                ],
                "summary": "Loan counteroffer reject",
                "operationId": "loanCounterofferReject",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get loan by id (yet not )",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Get loans by id",
                "operationId": "getloanbyid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Loan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update loan by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Update Loan",
                "operationId": "loanupdate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Loan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "account info",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.CreateLoan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete loan by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Delete Loan",
                "operationId": "loandelete",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Loan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{id}/counteroffers": {
            "get": {
                "description": "Retrieve all counteroffers related to this loan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loan",
                    "Investor"
                ],
                "summary": "Loan counteroffers",
                "operationId": "getLoanCounteroffers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Investor can suggest his loan terms to consumer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loan",
                    "Investor"
                ],
                "summary": "Loan counteroffer",
                "operationId": "loanCounteroffer",
                "parameters": [
                    {
                        "description": "counteroffer terms",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/command.CreateLoanCounteroffer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{id}/transactions": {
            "get": {
                "description": "User can get transactions related to his loan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loan",
                    "Investor",
                    "Consumer"
                ],
                "summary": "Get Loan Transactions",
                "operationId": "getLoanTransactions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/loans/{page}/{page_size}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all loans list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Loans"
                ],
                "summary": "Get All Loans",
                "operationId": "getallloans",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Current Page",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page Size",
                        "name": "page_size",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        },
        "/stripe/webhook": {
            "post": {
                "description": "Webhook for stripe events such as account confirmation, payment success or fail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Webhook for stripe events",
                "operationId": "stripeWebhook",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/eliftech-school_backend_internal_controllers.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "command.ChangePassword": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "command.ConfirmEmail": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "command.ConsumerRegistration": {
            "type": "object",
            "properties": {
                "idfile": {
                    "$ref": "#/definitions/multipart.FileHeader"
                },
                "middleName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "$ref": "#/definitions/multipart.FileHeader"
                },
                "propertyFile": {
                    "$ref": "#/definitions/multipart.FileHeader"
                },
                "surname": {
                    "type": "string"
                },
                "workFile": {
                    "$ref": "#/definitions/multipart.FileHeader"
                }
            }
        },
        "command.CreateLoan": {
            "type": "object",
            "required": [
                "creditDesc",
                "creditRate",
                "creditSum",
                "creditTerm",
                "creditTitle"
            ],
            "properties": {
                "creditDesc": {
                    "type": "string"
                },
                "creditRate": {
                    "type": "number"
                },
                "creditSum": {
                    "type": "number"
                },
                "creditTerm": {
                    "type": "integer"
                },
                "creditTitle": {
                    "type": "string"
                }
            }
        },
        "command.CreateLoanCounteroffer": {
            "type": "object",
            "required": [
                "creditRate",
                "creditTerm"
            ],
            "properties": {
                "creditRate": {
                    "type": "number"
                },
                "creditTerm": {
                    "type": "integer"
                }
            }
        },
        "command.InvestorRegistration": {
            "type": "object",
            "properties": {
                "idfile": {
                    "$ref": "#/definitions/multipart.FileHeader"
                },
                "middleName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo": {
                    "$ref": "#/definitions/multipart.FileHeader"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "command.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "command.LoginConfirm": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "command.OTP": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "command.Registration": {
            "type": "object",
            "required": [
                "email",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "command.RequestToResetPassword": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "domain.Balance": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "domain.Payout": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "eliftech-school_backend_internal_controllers.LoginConfirmResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "eliftech-school_backend_internal_controllers.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "typesMFA": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "eliftech-school_backend_internal_controllers.balancesResponse": {
            "type": "object",
            "properties": {
                "balances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Balance"
                    }
                }
            }
        },
        "eliftech-school_backend_internal_controllers.errorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "eliftech-school_backend_internal_controllers.otpResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "eliftech-school_backend_internal_controllers.payoutsResponse": {
            "type": "object",
            "properties": {
                "payouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Payout"
                    }
                }
            }
        },
        "eliftech-school_backend_internal_controllers.statusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "eliftech-school_backend_internal_controllers.stripeURLResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.LoginConfirmResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "typesMFA": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "internal_controllers.balancesResponse": {
            "type": "object",
            "properties": {
                "balances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Balance"
                    }
                }
            }
        },
        "internal_controllers.errorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.otpResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "internal_controllers.payoutsResponse": {
            "type": "object",
            "properties": {
                "payouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Payout"
                    }
                }
            }
        },
        "internal_controllers.statusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "internal_controllers.stripeURLResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "multipart.FileHeader": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/textproto.MIMEHeader"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "textproto.MIMEHeader": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.1",
	Host:             "localhost:8000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "50 Cent API",
	Description:      "Back end for 50 Cent Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
