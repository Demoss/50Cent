// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	command "eliftech-school/backend/internal/command"
	models "eliftech-school/backend/internal/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuth) Create(ctx context.Context, user *models.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuth)(nil).Create), ctx, user)
}

// CreateAdmin mocks base method.
func (m *MockAuth) CreateAdmin(ctx context.Context, admin *models.Admin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAuthMockRecorder) CreateAdmin(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAuth)(nil).CreateAdmin), ctx, admin)
}

// GetAdminByID mocks base method.
func (m *MockAuth) GetAdminByID(ctx context.Context, userID uint) (*models.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByID", ctx, userID)
	ret0, _ := ret[0].(*models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByID indicates an expected call of GetAdminByID.
func (mr *MockAuthMockRecorder) GetAdminByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByID", reflect.TypeOf((*MockAuth)(nil).GetAdminByID), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockAuth) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuth)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAuth) GetUserByID(ctx context.Context, userID uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuth)(nil).GetUserByID), ctx, userID)
}

// Update mocks base method.
func (m *MockAuth) Update(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAuthMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuth)(nil).Update), ctx, user)
}

// MockUpload is a mock of Upload interface.
type MockUpload struct {
	ctrl     *gomock.Controller
	recorder *MockUploadMockRecorder
}

// MockUploadMockRecorder is the mock recorder for MockUpload.
type MockUploadMockRecorder struct {
	mock *MockUpload
}

// NewMockUpload creates a new mock instance.
func NewMockUpload(ctrl *gomock.Controller) *MockUpload {
	mock := &MockUpload{ctrl: ctrl}
	mock.recorder = &MockUploadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpload) EXPECT() *MockUploadMockRecorder {
	return m.recorder
}

// AddFileToConsumer mocks base method.
func (m *MockUpload) AddFileToConsumer(ctx context.Context, file *models.UserFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileToConsumer", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileToConsumer indicates an expected call of AddFileToConsumer.
func (mr *MockUploadMockRecorder) AddFileToConsumer(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileToConsumer", reflect.TypeOf((*MockUpload)(nil).AddFileToConsumer), ctx, file)
}

// AddFileToInvestor mocks base method.
func (m *MockUpload) AddFileToInvestor(ctx context.Context, file *models.UserFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileToInvestor", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileToInvestor indicates an expected call of AddFileToInvestor.
func (mr *MockUploadMockRecorder) AddFileToInvestor(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileToInvestor", reflect.TypeOf((*MockUpload)(nil).AddFileToInvestor), ctx, file)
}

// Create mocks base method.
func (m *MockUpload) Create(ctx context.Context, files command.MultipartFiles, fileType models.FileType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, files, fileType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUploadMockRecorder) Create(ctx, files, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUpload)(nil).Create), ctx, files, fileType)
}

// CreateOne mocks base method.
func (m *MockUpload) CreateOne(ctx context.Context, file *multipart.FileHeader, fileType models.FileType, userID uint) (*models.UserFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", ctx, file, fileType, userID)
	ret0, _ := ret[0].(*models.UserFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockUploadMockRecorder) CreateOne(ctx, file, fileType, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockUpload)(nil).CreateOne), ctx, file, fileType, userID)
}

// MockLoan is a mock of Loan interface.
type MockLoan struct {
	ctrl     *gomock.Controller
	recorder *MockLoanMockRecorder
}

// MockLoanMockRecorder is the mock recorder for MockLoan.
type MockLoanMockRecorder struct {
	mock *MockLoan
}

// NewMockLoan creates a new mock instance.
func NewMockLoan(ctrl *gomock.Controller) *MockLoan {
	mock := &MockLoan{ctrl: ctrl}
	mock.recorder = &MockLoanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoan) EXPECT() *MockLoanMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoan) Create(ctx context.Context, loan *models.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoanMockRecorder) Create(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoan)(nil).Create), ctx, loan)
}

// Delete mocks base method.
func (m *MockLoan) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLoanMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoan)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockLoan) GetAll(ctx context.Context) (*[]models.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*[]models.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLoanMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLoan)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockLoan) GetByID(ctx context.Context, id uint64) (*models.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLoanMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLoan)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockLoan) Update(ctx context.Context, loan *models.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLoanMockRecorder) Update(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoan)(nil).Update), ctx, loan)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// CreateConsumer mocks base method.
func (m *MockConsumer) CreateConsumer(ctx context.Context, consumer *models.Consumer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConsumer", ctx, consumer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConsumer indicates an expected call of CreateConsumer.
func (mr *MockConsumerMockRecorder) CreateConsumer(ctx, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConsumer", reflect.TypeOf((*MockConsumer)(nil).CreateConsumer), ctx, consumer)
}

// GetConsumerByID mocks base method.
func (m *MockConsumer) GetConsumerByID(ctx context.Context, id uint64) (*models.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerByID", ctx, id)
	ret0, _ := ret[0].(*models.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerByID indicates an expected call of GetConsumerByID.
func (mr *MockConsumerMockRecorder) GetConsumerByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerByID", reflect.TypeOf((*MockConsumer)(nil).GetConsumerByID), ctx, id)
}

// GetConsumerByUserID mocks base method.
func (m *MockConsumer) GetConsumerByUserID(ctx context.Context, userID uint64) (*models.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerByUserID", ctx, userID)
	ret0, _ := ret[0].(*models.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumerByUserID indicates an expected call of GetConsumerByUserID.
func (mr *MockConsumerMockRecorder) GetConsumerByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerByUserID", reflect.TypeOf((*MockConsumer)(nil).GetConsumerByUserID), ctx, userID)
}

// MockMail is a mock of Mail interface.
type MockMail struct {
	ctrl     *gomock.Controller
	recorder *MockMailMockRecorder
}

// MockMailMockRecorder is the mock recorder for MockMail.
type MockMailMockRecorder struct {
	mock *MockMail
}

// NewMockMail creates a new mock instance.
func NewMockMail(ctrl *gomock.Controller) *MockMail {
	mock := &MockMail{ctrl: ctrl}
	mock.recorder = &MockMailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMail) EXPECT() *MockMailMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMail) Send(email, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", email, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailMockRecorder) Send(email, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMail)(nil).Send), email, msg)
}

// MockTwilio is a mock of Twilio interface.
type MockTwilio struct {
	ctrl     *gomock.Controller
	recorder *MockTwilioMockRecorder
}

// MockTwilioMockRecorder is the mock recorder for MockTwilio.
type MockTwilioMockRecorder struct {
	mock *MockTwilio
}

// NewMockTwilio creates a new mock instance.
func NewMockTwilio(ctrl *gomock.Controller) *MockTwilio {
	mock := &MockTwilio{ctrl: ctrl}
	mock.recorder = &MockTwilioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwilio) EXPECT() *MockTwilioMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockTwilio) SendMessage(to, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", to, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTwilioMockRecorder) SendMessage(to, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTwilio)(nil).SendMessage), to, code)
}

// MockInvestor is a mock of Investor interface.
type MockInvestor struct {
	ctrl     *gomock.Controller
	recorder *MockInvestorMockRecorder
}

// MockInvestorMockRecorder is the mock recorder for MockInvestor.
type MockInvestorMockRecorder struct {
	mock *MockInvestor
}

// NewMockInvestor creates a new mock instance.
func NewMockInvestor(ctrl *gomock.Controller) *MockInvestor {
	mock := &MockInvestor{ctrl: ctrl}
	mock.recorder = &MockInvestorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestor) EXPECT() *MockInvestorMockRecorder {
	return m.recorder
}

// CreateInvestor mocks base method.
func (m *MockInvestor) CreateInvestor(ctx context.Context, investor *models.Investor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvestor", ctx, investor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvestor indicates an expected call of CreateInvestor.
func (mr *MockInvestorMockRecorder) CreateInvestor(ctx, investor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvestor", reflect.TypeOf((*MockInvestor)(nil).CreateInvestor), ctx, investor)
}

// GetInvestorByID mocks base method.
func (m *MockInvestor) GetInvestorByID(ctx context.Context, id uint64) (*models.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestorByID", ctx, id)
	ret0, _ := ret[0].(*models.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestorByID indicates an expected call of GetInvestorByID.
func (mr *MockInvestorMockRecorder) GetInvestorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestorByID", reflect.TypeOf((*MockInvestor)(nil).GetInvestorByID), ctx, id)
}

// GetInvestorByUserID mocks base method.
func (m *MockInvestor) GetInvestorByUserID(ctx context.Context, userID uint64) (*models.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestorByUserID", ctx, userID)
	ret0, _ := ret[0].(*models.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestorByUserID indicates an expected call of GetInvestorByUserID.
func (mr *MockInvestorMockRecorder) GetInvestorByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestorByUserID", reflect.TypeOf((*MockInvestor)(nil).GetInvestorByUserID), ctx, userID)
}

// MockConfirmationCode is a mock of ConfirmationCode interface.
type MockConfirmationCode struct {
	ctrl     *gomock.Controller
	recorder *MockConfirmationCodeMockRecorder
}

// MockConfirmationCodeMockRecorder is the mock recorder for MockConfirmationCode.
type MockConfirmationCodeMockRecorder struct {
	mock *MockConfirmationCode
}

// NewMockConfirmationCode creates a new mock instance.
func NewMockConfirmationCode(ctrl *gomock.Controller) *MockConfirmationCode {
	mock := &MockConfirmationCode{ctrl: ctrl}
	mock.recorder = &MockConfirmationCodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfirmationCode) EXPECT() *MockConfirmationCodeMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockConfirmationCode) Create(ctx context.Context, code *models.ConfirmationCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockConfirmationCodeMockRecorder) Create(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfirmationCode)(nil).Create), ctx, code)
}

// DeleteConfirmationCode mocks base method.
func (m *MockConfirmationCode) DeleteConfirmationCode(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfirmationCode", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfirmationCode indicates an expected call of DeleteConfirmationCode.
func (mr *MockConfirmationCodeMockRecorder) DeleteConfirmationCode(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfirmationCode", reflect.TypeOf((*MockConfirmationCode)(nil).DeleteConfirmationCode), ctx, user)
}

// GetConfirmationCode mocks base method.
func (m *MockConfirmationCode) GetConfirmationCode(ctx context.Context, user *models.User) (*models.ConfirmationCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfirmationCode", ctx, user)
	ret0, _ := ret[0].(*models.ConfirmationCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfirmationCode indicates an expected call of GetConfirmationCode.
func (mr *MockConfirmationCodeMockRecorder) GetConfirmationCode(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfirmationCode", reflect.TypeOf((*MockConfirmationCode)(nil).GetConfirmationCode), ctx, user)
}
